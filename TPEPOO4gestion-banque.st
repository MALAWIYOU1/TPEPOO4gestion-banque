Object subclass: #Banque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!Banque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Banque methodsFor: 'operation' stamp: 'Ousmane 7/2/2020 17:00'!creerCompte: unCompte client: unClient	| compte client banque tail|	banque := self .	client := unClient.	compte := unCompte.	client compte: compte.	self compteList: compte.	self clientList: client.	  	client  id: (banque clientList at: 1 )id + 1 .  compte  numero: (banque compteList at: 1 )numero + 1 ! !!Banque methodsFor: 'acccessing' stamp: 'Ousmane 7/2/2020 16:54'!clientList: unClient	 | clientList |clientList addFirst: unClient! !!Banque methodsFor: 'acccessing' stamp: 'Ousmane 7/2/2020 16:57'!compteList: unCompte	  | compteList |compteList addFirst: unCompte! !!Banque methodsFor: 'acccessing' stamp: 'Ousmane 7/2/2020 16:55'!compteList	| compteList |	^ compteList! !!Banque methodsFor: 'acccessing' stamp: 'Ousmane 7/2/2020 16:53'!clientList	| clientList |	^ clientList! !!Banque methodsFor: 'initalize' stamp: 'Ousmane 7/2/2020 16:58'!initialize 	"comment stating purpose of message"		| compteList clientList |	super initialize.		 compteList:= OrderedCollection new.		  clientList:= OrderedCollection new ! !Object subclass: #Client	instanceVariableNames: 'id nom compte depot'	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!Client commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Client methodsFor: 'initialize' stamp: 'Ousmane 7/2/2020 17:06'!initialize 	super initialize.	  nom:= ''.	  id:= 0.	  compte:= nil! !!Client methodsFor: 'operations' stamp: 'Ousmane 7/2/2020 17:12'!transferer:aNumber a: unClient( self compte etat) ifFalse: [ Transcript show: 'Votre compte est ferm√©';cr.	^false ].	(aNumber <1)		ifTrue: [ ^false ]		ifFalse: [ 				(self retirer: aNumber) 					ifTrue: [						(unClient depot: aNumber)								ifTrue: [^true]								ifFalse: [ ^false ]						]						]! !!Client methodsFor: 'operations' stamp: 'Ousmane 7/2/2020 17:09'!depot  	^ depot! !!Client methodsFor: 'operations' stamp: 'Ousmane 7/2/2020 17:07'!depot: aNumber	self compte etat		ifFalse: [^ false ].	aNumber < 1		ifTrue: [ ^ false ]		ifFalse: [ self compte montant: self compte+ aNumber.			^ true ]! !!Client methodsFor: 'operations' stamp: 'Ousmane 7/2/2020 17:11'!retirer:aNumber  ( self compte etat) ifFalse: [ Transcript show: 'Votre compte est fermee';cr.	^false ].	(aNumber <1)		ifTrue: [ ^false ]		ifFalse: [ 			(self compte montant > aNumber )			ifFalse: [ Transcript show: 'votre solde est insuffisant';cr.				^false]			ifTrue:[				(self compte) montant:(self compte - aNumber).				^true				]	 			]! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:03'!id: anObject	id := anObject! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:04'!id	^ id! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:02'!compte: uncompte	| compte |	compte := uncompte! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:04'!nom	^ nom! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:01'!compte	| compte |	^ compte! !!Client methodsFor: 'accesing' stamp: 'Ousmane 7/2/2020 17:04'!nom: anObject	nom := anObject! !Object subclass: #Compte	instanceVariableNames: 'etat montant numero'	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!Compte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Compte methodsFor: 'accessing' stamp: 'Ousmane 7/2/2020 17:15'!montant: aNumber	montant := aNumber! !!Compte methodsFor: 'accessing' stamp: 'Ousmane 7/2/2020 17:16'!numero: aNumber	numero:= aNumber ! !!Compte methodsFor: 'access' stamp: 'Ousmane 7/2/2020 17:18'!montant	^ montant! !!Compte methodsFor: 'access' stamp: 'Ousmane 7/2/2020 17:18'!numero	^ numero! !!Compte methodsFor: 'access' stamp: 'Ousmane 7/2/2020 17:18'!etat"permet de savoir si un compte est fermer ou pas "	^ etat! !!Compte methodsFor: 'initialize' stamp: 'Ousmane 7/2/2020 17:20'!initialize	  montant:= 0.	  numero:= 0.	  etat:= true! !Object subclass: #CompteEpargne	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!CompteEpargne commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Object subclass: #Comptecourant	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!Comptecourant commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!PackageManifest subclass: #ManifestTPEPOOgestionbanque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPEPOO4gestion-banque'!!ManifestTPEPOOgestionbanque commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestTPEPOOgestionbanque class	instanceVariableNames: ''!!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:23'!ruleRBClassNotReferencedRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Client)) #'2020-07-02T17:21:52.628489+01:00') #(#(#RGClassDefinition #(#Compte)) #'2020-07-02T17:23:02.070489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:13'!ruleRBSentNotImplementedRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Client #transferer:a: #false)) #'2020-07-02T17:12:54.772489+01:00') #(#(#RGMethodDefinition #(#Client #retirer: #false)) #'2020-07-02T17:13:17.662489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:23'!ruleGRVariableAssignedLiteralRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Client)) #'2020-07-02T17:22:07.546489+01:00') #(#(#RGClassDefinition #(#Compte)) #'2020-07-02T17:23:05.059489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:12'!ruleRBReturnsBooleanAndOtherRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Client #transferer:a: #false)) #'2020-07-02T17:12:59.907489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:22'!ruleRBTempVarOverridesInstVarRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Client #compte #false)) #'2020-07-02T17:22:21.649489+01:00') #(#(#RGMethodDefinition #(#Client #compte: #false)) #'2020-07-02T17:22:33.819489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:22'!ruleGRIvarNeitherReadNorWrittenRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Client)) #'2020-07-02T17:22:00.753489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:21'!ruleRBUtilityMethodsRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Banque #clientList: #false)) #'2020-07-02T17:21:13.523489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:21'!ruleRBInconsistentMethodClassificationRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Compte)) #'2020-07-02T17:20:38.291489+01:00') #(#(#RGMethodDefinition #(#Banque #initialize #false)) #'2020-07-02T17:21:27.598489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:22'!ruleRBTempsReadBeforeWrittenRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Banque #clientList #false)) #'2020-07-02T17:20:53.308489+01:00') #(#(#RGMethodDefinition #(#Banque #clientList: #false)) #'2020-07-02T17:21:06.943489+01:00') #(#(#RGMethodDefinition #(#Client #compte #false)) #'2020-07-02T17:22:24.963489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:22'!ruleGRTemporaryNeitherReadNorWrittenRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#Banque #clientList #false)) #'2020-07-02T17:20:58.375489+01:00') #(#(#RGMethodDefinition #(#Banque #clientList: #false)) #'2020-07-02T17:21:09.994489+01:00') #(#(#RGMethodDefinition #(#Banque #initialize #false)) #'2020-07-02T17:21:31.981489+01:00') #(#(#RGMethodDefinition #(#Banque #creerCompte:client: #false)) #'2020-07-02T17:21:40.536489+01:00') #(#(#RGMethodDefinition #(#Client #compte #false)) #'2020-07-02T17:22:27.805489+01:00') #(#(#RGMethodDefinition #(#Client #compte: #false)) #'2020-07-02T17:22:38.389489+01:00') )! !!ManifestTPEPOOgestionbanque class methodsFor: 'code-critics' stamp: 'Ousmane 7/2/2020 17:21'!ruleRBVariableReferencedOnceRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Client)) #'2020-07-02T17:21:58.059489+01:00') )! !